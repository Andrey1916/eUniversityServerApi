// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eUniversityServer.DAL;

namespace eUniversityServer.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191113145212_InitialCreation")]
    partial class InitialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eUniversityServer.DAL.Entities.AcademicDiscipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AssistantId");

                    b.Property<int>("Attestation")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CurriculumId");

                    b.Property<Guid>("DepartmentId");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(true);

                    b.Property<Guid>("LecturerId");

                    b.Property<int>("NumberOfCredits");

                    b.Property<int>("Semester")
                        .IsUnicode(false);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<Guid>("SpecialtyId");

                    b.Property<int>("TypeOfIndividualWork")
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AssistantId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("AcademicDisciplines");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.AcademicGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Captain");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Curator");

                    b.Property<Guid>("DepartmentId");

                    b.Property<Guid>("EducationLevelId");

                    b.Property<Guid>("FormOfEducationId");

                    b.Property<short>("Grade");

                    b.Property<int>("Number");

                    b.Property<Guid>("SpecialtyId");

                    b.Property<Guid>("StructuralUnitId");

                    b.Property<string>("UIN")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("FormOfEducationId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("StructuralUnitId");

                    b.ToTable("AcademicGroups");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Curriculum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DateOfApproval");

                    b.Property<Guid>("DepartmentId");

                    b.Property<Guid>("EducationLevelId");

                    b.Property<Guid?>("EducationProgramId");

                    b.Property<Guid>("FormOfEducationId");

                    b.Property<string>("ListOfApprovals");

                    b.Property<string>("OrderOfApprovals");

                    b.Property<string>("ProtocolOfAcademicCouncilOfUnit");

                    b.Property<string>("ProtocolOfAcademicCouncilOfUniversity");

                    b.Property<string>("ScheduleOfEducationProcess");

                    b.Property<string>("SpecialtyGuarantor")
                        .HasMaxLength(512);

                    b.Property<Guid>("SpecialtyId");

                    b.Property<Guid>("StructuralUnitId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("YearOfAdmission");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("FormOfEducationId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("StructuralUnitId");

                    b.ToTable("Curricula");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Chief")
                        .HasMaxLength(512);

                    b.Property<string>("Code")
                        .HasMaxLength(16);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("FullName")
                        .HasMaxLength(512);

                    b.Property<string>("FullNameEng")
                        .HasMaxLength(512);

                    b.Property<string>("ShortName")
                        .HasMaxLength(256);

                    b.Property<Guid?>("StructuralUnitId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("StructuralUnitId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.EducationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DateOfIssue");

                    b.Property<string>("IssuingAuthority")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(true);

                    b.Property<long?>("Number")
                        .IsRequired();

                    b.Property<string>("Series")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("EducationDocuments");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.EducationLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<int>("Number");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.EducationProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovalYear");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<short?>("DurationbOfEducation");

                    b.Property<Guid>("EducationLevelId");

                    b.Property<string>("Guarantor")
                        .HasMaxLength(512);

                    b.Property<string>("Language")
                        .HasMaxLength(32);

                    b.Property<Guid>("SpecialtyId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("EducationPrograms");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.ExamsGradesSpreadsheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AcademicDisciplineId");

                    b.Property<Guid>("AcademicGroupId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("EducationProgramId");

                    b.Property<DateTime>("ExamDate");

                    b.Property<int>("ExamsSpreadsheetAttestationType")
                        .IsUnicode(false);

                    b.Property<int>("ExamsSpreadsheetType")
                        .IsUnicode(false);

                    b.Property<Guid>("FormOfEducationId");

                    b.Property<short>("SemesterNumber");

                    b.Property<Guid>("SpecialtyId");

                    b.Property<string>("SpreadsheetNumber")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<Guid>("StructuralUnitId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AcademicDisciplineId");

                    b.HasIndex("AcademicGroupId");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("FormOfEducationId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("SpreadsheetNumber")
                        .IsUnique();

                    b.HasIndex("StructuralUnitId");

                    b.ToTable("ExamsGradesSpreadsheets");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.FormOfEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("FormOfEducations");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.IdentificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("IdentificationCodeDateOfIssue")
                        .IsRequired();

                    b.Property<string>("IdentificationCodeIssuingAuthority")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<long?>("IdentificationCodeNumber")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("IdentificationCodes");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.LevelsOfHigherEducationSpecialties", b =>
                {
                    b.Property<Guid>("SpecialtyId");

                    b.Property<Guid>("EducationLevelId");

                    b.HasKey("SpecialtyId", "EducationLevelId");

                    b.HasIndex("EducationLevelId");

                    b.ToTable("LevelsOfHigherEducationSpecialties");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("LogLevel")
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("StackTrace");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Passport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("Nationality");

                    b.Property<DateTime?>("PassportDateOfIssue");

                    b.Property<string>("PassportIssuingAuthority")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<long?>("PassportNumber")
                        .IsRequired();

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("PlaceOfBirth");

                    b.Property<string>("RegistrationAddress");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Passports");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessModifier")
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("TargetModifier")
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("031e06df-651d-4791-85d1-3d9f0f3fa320"),
                            AccessModifier = 1,
                            CreatedAt = new DateTime(2019, 5, 25, 13, 6, 26, 0, DateTimeKind.Utc),
                            TargetModifier = 0,
                            UpdatedAt = new DateTime(2019, 5, 25, 13, 6, 26, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Privilege", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.RatingForDiscipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AcademicDisciplineId");

                    b.Property<Guid>("AcademicGroupId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<Guid>("ExamsGradesSpreadsheetId");

                    b.Property<short>("Score");

                    b.Property<Guid>("StudentId");

                    b.Property<Guid>("TeacherId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AcademicDisciplineId");

                    b.HasIndex("AcademicGroupId");

                    b.HasIndex("ExamsGradesSpreadsheetId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("RatingForDisciplines");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("031e06df-651d-4791-85d1-3d9f0f3fa320"),
                            CreatedAt = new DateTime(2019, 5, 25, 13, 6, 26, 0, DateTimeKind.Utc),
                            Name = "SuperAdmin",
                            UpdatedAt = new DateTime(2019, 5, 25, 13, 6, 26, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("0f8fad5b-d9cb-469f-a165-70867728950e"),
                            CreatedAt = new DateTime(2019, 5, 25, 13, 6, 26, 0, DateTimeKind.Utc),
                            Name = "User",
                            UpdatedAt = new DateTime(2019, 5, 25, 13, 6, 26, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.RolePermissions", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("PermissionId");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("031e06df-651d-4791-85d1-3d9f0f3fa320"),
                            PermissionId = new Guid("031e06df-651d-4791-85d1-3d9f0f3fa320")
                        });
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discipline")
                        .HasMaxLength(512);

                    b.Property<string>("GroupsCode")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.StructuralUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Chief")
                        .HasMaxLength(512);

                    b.Property<string>("Code")
                        .HasMaxLength(16);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<string>("FullNameEng")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<string>("ShortName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("StructuralUnits");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AcademicGroupId");

                    b.Property<bool>("AcceleratedFormOfEducation")
                        .HasMaxLength(512);

                    b.Property<string>("AddressOfResidence")
                        .HasMaxLength(512);

                    b.Property<string>("Chummery")
                        .HasMaxLength(512);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("EducationDocumentId");

                    b.Property<Guid>("EducationLevelId");

                    b.Property<Guid?>("EducationProgramId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime>("EntryDate");

                    b.Property<int>("Financing")
                        .IsUnicode(false);

                    b.Property<string>("ForeignLanguage")
                        .HasMaxLength(128);

                    b.Property<Guid>("FormOfEducationId");

                    b.Property<Guid>("IdentificationCodeId");

                    b.Property<bool?>("MilitaryRegistration");

                    b.Property<int>("NumberOfRecordBook");

                    b.Property<Guid>("PassportId");

                    b.Property<Guid?>("PrivilegeId");

                    b.Property<int>("Sex")
                        .IsUnicode(false);

                    b.Property<long>("StudentTicketNumber");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<Guid>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicGroupId");

                    b.HasIndex("EducationDocumentId")
                        .IsUnique();

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("FormOfEducationId");

                    b.HasIndex("IdentificationCodeId")
                        .IsUnique();

                    b.HasIndex("PassportId")
                        .IsUnique();

                    b.HasIndex("PrivilegeId");

                    b.HasIndex("UserInfoId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcademicRank")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("DepartmentId");

                    b.Property<string>("Position")
                        .HasMaxLength(256);

                    b.Property<string>("ScientificDegree")
                        .HasMaxLength(256);

                    b.Property<int>("TypeOfEmployment")
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<Guid>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserInfoId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<Guid>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0b0fec5-8958-43ca-99b8-1978f198cf06"),
                            CreatedAt = new DateTime(2019, 5, 25, 13, 6, 26, 0, DateTimeKind.Utc),
                            PasswordHash = new byte[] { 89, 33, 171, 24, 175, 100, 4, 18, 135, 159, 201, 244, 109, 25, 111, 95, 55, 6, 204, 243, 71, 220, 125, 169, 197, 218, 207, 13, 6, 226, 200, 38, 115, 11, 128, 249, 118, 17, 149, 21, 29, 213, 64, 232, 238, 39, 238, 161, 210, 85, 241, 126, 29, 231, 84, 113, 148, 64, 50, 176, 129, 5, 112, 33 },
                            PasswordSalt = new byte[] { 254, 195, 179, 232, 139, 63, 110, 232, 152, 23, 132, 215, 28, 175, 142, 119, 12, 137, 45, 36, 231, 209, 44, 24, 245, 183, 125, 33, 7, 0, 119, 208, 4, 68, 203, 137, 69, 147, 100, 10, 100, 191, 249, 249, 205, 62, 227, 218, 159, 127, 219, 11, 20, 200, 102, 50, 236, 50, 48, 52, 115, 34, 89, 230, 36, 102, 242, 205, 163, 140, 107, 81, 232, 114, 251, 152, 241, 13, 81, 110, 12, 197, 11, 163, 39, 104, 186, 184, 181, 61, 130, 95, 72, 198, 16, 139, 104, 133, 32, 15, 126, 204, 169, 44, 248, 11, 129, 162, 180, 202, 126, 174, 129, 155, 86, 45, 139, 115, 170, 125, 227, 138, 52, 163, 132, 144, 89, 155 },
                            UpdatedAt = new DateTime(2019, 5, 25, 13, 6, 26, 0, DateTimeKind.Utc),
                            UserInfoId = new Guid("031e06df-651d-4791-87d1-3d9f0f8fa325")
                        });
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("FirstNameEng");

                    b.Property<string>("LastName");

                    b.Property<string>("LastNameEng");

                    b.Property<string>("Patronymic");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("031e06df-651d-4791-87d1-3d9f0f8fa325"),
                            Email = "admin@euniversity.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            FirstNameEng = "John",
                            LastName = "Doe",
                            LastNameEng = "Doe",
                            Patronymic = "Smith"
                        });
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.UserRoles", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("031e06df-651d-4791-85d1-3d9f0f3fa320"),
                            UserId = new Guid("b0b0fec5-8958-43ca-99b8-1978f198cf06")
                        });
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.AcademicDiscipline", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.Teacher", "Assistant")
                        .WithMany("AssistantDisciplines")
                        .HasForeignKey("AssistantId");

                    b.HasOne("eUniversityServer.DAL.Entities.Curriculum", "Curriculum")
                        .WithMany("AcademicDisciplines")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.Department", "Department")
                        .WithMany("AcademicDisciplines")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.Teacher", "Lecturer")
                        .WithMany("LecturerDisciplines")
                        .HasForeignKey("LecturerId");

                    b.HasOne("eUniversityServer.DAL.Entities.Specialty", "Specialty")
                        .WithMany("AcademicDisciplines")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.AcademicGroup", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.Department", "Department")
                        .WithMany("AcademicGroups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.EducationLevel", "EducationLevel")
                        .WithMany("AcademicGroups")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.FormOfEducation", "FormOfEducation")
                        .WithMany("AcademicGroups")
                        .HasForeignKey("FormOfEducationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.Specialty", "Specialty")
                        .WithMany("AcademicGroups")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.StructuralUnit", "StructuralUnit")
                        .WithMany("AcademicGroups")
                        .HasForeignKey("StructuralUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Curriculum", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.Department", "Department")
                        .WithMany("Curricula")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.EducationLevel", "EducationLevel")
                        .WithMany("Curricula")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.EducationProgram", "EducationProgram")
                        .WithMany("Curricula")
                        .HasForeignKey("EducationProgramId");

                    b.HasOne("eUniversityServer.DAL.Entities.FormOfEducation", "FormOfEducation")
                        .WithMany("Curricula")
                        .HasForeignKey("FormOfEducationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.Specialty", "Specialty")
                        .WithMany("Curricula")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.StructuralUnit", "StructuralUnit")
                        .WithMany("Curricula")
                        .HasForeignKey("StructuralUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Department", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.StructuralUnit", "StructuralUnit")
                        .WithMany("Departments")
                        .HasForeignKey("StructuralUnitId");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.EducationProgram", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.EducationLevel", "EducationLevel")
                        .WithMany("EducationPrograms")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eUniversityServer.DAL.Entities.Specialty", "Specialty")
                        .WithMany("EducationPrograms")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.ExamsGradesSpreadsheet", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.AcademicDiscipline", "AcademicDiscipline")
                        .WithMany("ExamsGradesSpreadsheets")
                        .HasForeignKey("AcademicDisciplineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.AcademicGroup", "AcademicGroup")
                        .WithMany("ExamsGradesSpreadsheets")
                        .HasForeignKey("AcademicGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.EducationProgram", "EducationProgram")
                        .WithMany("ExamsGradesSpreadsheets")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.FormOfEducation", "FormOfEducation")
                        .WithMany("ExamsGradesSpreadsheets")
                        .HasForeignKey("FormOfEducationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.Specialty", "Specialty")
                        .WithMany("ExamsGradesSpreadsheets")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.StructuralUnit", "StructuralUnit")
                        .WithMany("ExamsGradesSpreadsheets")
                        .HasForeignKey("StructuralUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.LevelsOfHigherEducationSpecialties", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.EducationLevel", "EducationLevel")
                        .WithMany("LevelsOfHigherEducationSpecialties")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eUniversityServer.DAL.Entities.Specialty", "Specialty")
                        .WithMany("LevelsOfHigherEducationSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Log", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.RatingForDiscipline", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.AcademicDiscipline", "AcademicDiscipline")
                        .WithMany("RatingForDisciplines")
                        .HasForeignKey("AcademicDisciplineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.AcademicGroup", "AcademicGroup")
                        .WithMany("RatingForDisciplines")
                        .HasForeignKey("AcademicGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.ExamsGradesSpreadsheet", "ExamsGradesSpreadsheet")
                        .WithMany("RatingForDisciplines")
                        .HasForeignKey("ExamsGradesSpreadsheetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.Student", "Student")
                        .WithMany("RatingForDisciplines")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.Teacher", "Teacher")
                        .WithMany("RatingForDisciplines")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.RolePermissions", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eUniversityServer.DAL.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Student", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.AcademicGroup", "AcademicGroup")
                        .WithMany("Students")
                        .HasForeignKey("AcademicGroupId");

                    b.HasOne("eUniversityServer.DAL.Entities.EducationDocument", "EducationDocument")
                        .WithOne("Student")
                        .HasForeignKey("eUniversityServer.DAL.Entities.Student", "EducationDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eUniversityServer.DAL.Entities.EducationLevel", "EducationLevel")
                        .WithMany("Students")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.EducationProgram", "EducationProgram")
                        .WithMany("Students")
                        .HasForeignKey("EducationProgramId");

                    b.HasOne("eUniversityServer.DAL.Entities.FormOfEducation", "FormOfEducation")
                        .WithMany("Students")
                        .HasForeignKey("FormOfEducationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eUniversityServer.DAL.Entities.IdentificationCode", "IdentificationCode")
                        .WithOne("Student")
                        .HasForeignKey("eUniversityServer.DAL.Entities.Student", "IdentificationCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eUniversityServer.DAL.Entities.Passport", "Passport")
                        .WithOne("Student")
                        .HasForeignKey("eUniversityServer.DAL.Entities.Student", "PassportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eUniversityServer.DAL.Entities.Privilege", "Privilege")
                        .WithMany("Students")
                        .HasForeignKey("PrivilegeId");

                    b.HasOne("eUniversityServer.DAL.Entities.UserInfo", "UserInfo")
                        .WithOne("Student")
                        .HasForeignKey("eUniversityServer.DAL.Entities.Student", "UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.Teacher", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eUniversityServer.DAL.Entities.UserInfo", "UserInfo")
                        .WithOne("Teacher")
                        .HasForeignKey("eUniversityServer.DAL.Entities.Teacher", "UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.User", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.UserInfo", "UserInfo")
                        .WithOne("User")
                        .HasForeignKey("eUniversityServer.DAL.Entities.User", "UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eUniversityServer.DAL.Entities.UserRoles", b =>
                {
                    b.HasOne("eUniversityServer.DAL.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eUniversityServer.DAL.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
